#!/bin/bash
source BOOTSTRAP_SRCROUTINE_ROOT_PLACEHOLDER/lib/env
DRY=
FORCE=

function usage() {
	echo "usage: srcroutine -i type/name flags"
	echo "flags:"
	echo "  -i = routine specification"
 	echo "  -d = dry run"
	echo "  -f = force"
	echo "  -h = help"
	echo "example: srcroutine -i net/curl -d"
	exit $1
}

function preChecks() {
	if [[ "$EUID" != "0" ]] && [[ "$FORCE" != 1 ]]; then
		echo "error: srcroutine must be run as root! to ignore this, pass the -f flag (note that srcroutine will assume $USER has permissions to write to $SRCROUTINE_ROOT"
		exit 1
	fi
        if [ "$(find "$SRCROUTINE_ROOT/tars/" | grep "$1" | wc -l)" -lt "1" ]; then
                echo "error: tar file $1 not found in $SRCROUTINE_ROOT!"
                exit 1
        fi
        if [ "$(find "$SRCROUTINE_ROOT/tars/" | grep "$1" | wc -l)" -ge "2" ]; then
                echo "error: more than one tar version of $1 detected in $SRCROUTINE_ROOT!"
                exit 1
        fi
	if [ "$(find "$SRCROUTINE_ROOT/routines/" | grep "$1" | wc -l)" -lt "1" ]; then
		echo "error: routine $1 not found!"
	fi
}

function getTar() {
	echo "$(find $SRCROUTINE_ROOT | grep $1)"
}

function main() {
	preChecks $1
	TARFILE="$(getTar)"

	if [ -n "$DRY" ]; then
		echo "would extract $TARFILE"
	else
		echo "extracting $TARFILE"
		tar xf $TARFILE $SRCROUTINE_ROOT/tars/$1
	fi
	if [ -n "$DRY" ]; then
		echo "WARNING! This routine may not provide proper dry run support! Press enter to continue, CTRL^C to abort. "
		read
	fi
	cd $SRCROUTINE_ROOT/tars/$1
	bash $SRCROUTINE_ROOT/routines/$1 $DRY
	exit $?
}

while getopts ":dhfi:" opt; do
	case ${opt} in
		h) usage 0      ;;
		d) DRY=1        ;;
		f) FORCE=1      ;;
		i) main $OPTARG ;;
		\?) usage 1      ;;
	esac
done
usage 1

