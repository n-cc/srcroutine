#!/bin/bash
source BOOTSTRAP_SRCROUTINE_ROOT_PLACEHOLDER/lib/env
DRY=
FORCE=

function usage() {
	echo "usage: srcroutine -i type/name flags"
	echo "flags:"
	echo "  -i = routine specification"
 	echo "  -d = dry run"
	echo "  -f = force"
	echo "  -h = help"
	echo "example: srcroutine -i net/curl -d"
	exit $1
}

function prechecks() {
	if [[ "$EUID" != "0" ]] && [[ "$FORCE" != 1 ]]; then
		echo "srcroutine must be run as root! to ignore this, pass the -f flag (note that srcroutine will assume $USER has permissions to write to $SRCROUTINE_ROOT"
		exit 1
	fi
}
function main() {
	prechecks

	if [[ "$(ls $SRCROUTINE_ROOT/tars/$2 | wc -l)" == "0" ]]; then
		echo "tar file $2 not found in $SRCROUTINE_ROOT/tars!"
		exit 1
	fi
	if [[ "$(ls $SRCROUTINE_ROOT/tars/$2 | wc -l)" != "1" ]]; then
		echo "more than one tar version of $2 detected at $SRCROUTINE_ROOT/tars!"
		exit 1
	fi
	if [[ -n "$DRY" ]]; then
		echo "would extract $SRCROUTINE_ROOT/tars/$2"
	else
		echo "extracting $SRCROUTINE_ROOT/tars/$2"
		tar xf $SRCROUTINE_ROOT/tars/$2* $SRCROUTINE_ROOT/tars/$2
	fi
	if [[ -n "$DRY" ]]; then
		echo "WARNING! This routine may not provide proper dry run support! Press enter to continue, CTRL^C to abort. "
		read
	fi
	cd $SRCROUTINE_ROOT/tars/$2
	bash $SRCROUTINE_ROOT/routines/$2 $DRY
	exit $?
}

while getopts ":dhfi:" opt; do        
	case ${opt} in
		h) usage 0      ;;
		d) DRY=1        ;;
		f) FORCE=1      ;;
		i) main $OPTARG ;;
		*) usage 1      ;;
	esac
done 
